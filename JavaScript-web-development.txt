Declaring variables in JavaScript:
there are three ways to do that:- 1. var one = 1; var is function scope also can be changed in scope available before declaration.
2. let two = 2; let is block scope also it can be changed in scope only available after decalaration.
3. const three = 3; const is block scope , it cannot be changed , only available after decalaration.

Data types in JavaScript:
Primitive Data Types
These are immutable and stored directly in the variable.

1.String

Textual data

e.g. "hello", 'JavaScript'

2.Number

Numeric values (both integers and floating point)

e.g. 42, 3.14

3.BigInt

For very large integers beyond Number limits

e.g. 9007199254740991n

4.Boolean

Logical true/false

e.g. true, false

5.undefined

Variable declared but no value assigned

e.g. let x; console.log(x); // undefined

6.null

Intentional “no value”

e.g. let y = null;

7.Symbol

Unique, immutable identifier

e.g. const sym = Symbol('id');

1.Object

Collections of key-value pairs

e.g.

js
Copy
Edit
const person = { name: 'Alice', age: 25 };
2.Array

Ordered list-like objects

e.g.

js
Copy
Edit
const numbers = [1, 2, 3, 4];
3.Function

Callable objects

e.g.

js
Copy
Edit
function greet() {
  console.log("Hello!");
}
4.Date, RegExp, Map, Set, etc.

Built-in objects for special purposes


Primitive Data Types                                                                        
Stored directly in the variable.                                                                       
                                                                                                                                             
Immutable (can’t be changed directly).                                                                                                             
                                                                                                                                                                   
Simple values. 



Non-Primitive (Reference) Data Types
Stored as references (address in memory).

Functions: A function in JavaScript is a reusable block of code designed to perform a specific task, which can be executed whenever it’s called.

function sayHello() {
  console.log("Hello, world!");
}

// Calling the function
sayHello(); // Output: Hello, world!


Uses of Functions in JavaScript:

Avoid Repetition (Reusability)

Write code once, use it many times.

function greet() {
  console.log("Hello!");
}

greet();
greet();
Organize Code (Readability)

Makes your code neat and easier to understand.

Divide Big Problems into Smaller Parts (Modularity)

Solve complex tasks step by step.

Accept Input and Give Output (Parameters & Return Values)

function add(a, b) {
  return a + b;
}

let result = add(5, 3);
console.log(result); // 8
Use with Events

Run code when something happens (like clicking a button).

function showMessage() {
  alert("Button clicked!");
}

document.querySelector("button").onclick = showMessage;
Maintain Clean and DRY Code

DRY = Don’t Repeat Yourself
Passing information to a function:-
To make a function more reusable you'll often want to pass information into it. If we consider our displayGreeting example above, it will only display Hello, world!. Not the most useful function one could create. If we want to make it a little more flexible, like allowing someone to specify the name of the person to greet, we can add a parameter. A parameter (also sometimes called an argument), is additional information sent to a function.

Parameters are listed in the definition part within parenthesis and are comma separated like so:

function name(param, param2, param3) {

}

Functions as parameters for functions:-
As you progress in your programming career, you will come across functions which accept functions as parameters. This neat trick is commonly used when we don't know when something is going to occur or complete, but we know we need to perform an operation in response.

function displayDone() {
  console.log('3 seconds has elapsed');
}
// timer value is in milliseconds
setTimeout(displayDone, 3000);

Anonymous functions-
Let's take another look at what we've built. We're creating a function with a name which will be used one time. As our application gets more complex, we can see ourselves creating a lot of functions which will only be called once. This isn't ideal. As it turns out, we don't always need to provide a name!

When we are passing a function as a parameter we can bypass creating one in advance and instead build one as part of the parameter. We use the same function keyword, but instead we build it as a parameter.
function displayDone() {
  console.log('3 seconds has elapsed');
}
// timer value is in milliseconds
setTimeout(displayDone, 3000);

Fat arrow functions
One shortcut common in a lot of programming languages (including JavaScript) is the ability to use what's called an arrow or fat arrow function. It uses a special indicator of =>, which looks like an arrow - thus the name! By using =>, we are able to skip the function keyword.

Let's rewrite our code one more time to use a fat arrow function:

setTimeout(() => {
  console.log('3 seconds has elapsed');
}, 3000);


 Booleans:-
Booleans can have only two values: true or false. Booleans help make decisions on which lines of code should run when certain conditions are met.

If Statement
The if statement will run code in between its blocks if the condition is true.

if (condition) {
  //Condition is true. Code in this block will run.
}

Logical operators are often used to form the condition.

let currentMoney;
let laptopPrice;

if (currentMoney >= laptopPrice) {
  //Condition is true. Code in this block will run.
  console.log("Getting a new laptop!");
}

If..Else Statement
The else statement will run the code in between its blocks when the condition is false. It's optional with an if statement.

let currentMoney;
let laptopPrice;

if (currentMoney >= laptopPrice) {
  //Condition is true. Code in this block will run.
  console.log("Getting a new laptop!");
} else {
  //Condition is false. Code in this block will run.
  console.log("Can't afford a new laptop, yet!");
}

== → Loose Equality
Checks if values are equal after type conversion.

Different types might become the same during comparison.

console.log(5 == '5');      // true → string '5' converted to number 5
console.log(true == 1);     // true → true converted to number 1
console.log(null == undefined); // true

=== → Strict Equality
Checks if values are equal and types are also same.

No conversion happens!

console.log(5 === '5');     // false → number vs string
console.log(true === 1);    // false → boolean vs number
console.log(null === undefined); // false
console.log(5 === 5);       // true

!= (Loose Inequality)
Checks if values are not equal, ignoring types.

If types are different, JavaScript converts them to the same type before comparing.

Examples:


console.log(5 != '5');      // false → '5' gets converted to number 5
console.log(true != 1);     // false → true converts to 1
console.log(null != undefined); // false

!== (Strict Inequality)
Checks if values are not equal OR types are different.

No type conversion happens.

Examples:

console.log(5 !== '5');     // true → number and string are different types
console.log(true !== 1);    // true → boolean and number are different
console.log(null !== undefined); // true
console.log(5 !== 5);       // false → value and type are the same

+---------+-----------------------------------------------+-----------------+
| Symbol  | Description                                   | Example         |
+---------+-----------------------------------------------+-----------------+
| <       | Less than: Compares two values and returns    | 5 < 6 // true   |
|         | true if the left side is less than the right. |                 |
+---------+-----------------------------------------------+-----------------+
| <=      | Less than or equal to: Compares two values    | 5 <= 6 // true  |
|         | and returns true if the left side is less     |                 |
|         | than or equal to the right.                   |                 |
+---------+-----------------------------------------------+-----------------+
| >       | Greater than: Compares two values and returns | 5 > 6 // false  |
|         | true if the left side is larger than the      |                 |
|         | right.                                        |                 |
+---------+-----------------------------------------------+-----------------+
| >=      | Greater than or equal to: Compares two values | 5 >= 6 // false |
|         | and returns true if the left side is larger   |                 |
|         | than or equal to the right.                   |                 |
+---------+-----------------------------------------------+-----------------+
| ===     | Strict equality: Compares two values and      | 5 === 6 // false|
|         | returns true if values on the right and left  |                 |
|         | are equal AND are the same data type.         |                 |
+---------+-----------------------------------------------+-----------------+
| !==     | Inequality: Compares two values and returns   | 5 !== 6 // true |
|         | the opposite Boolean value of what a strict   |                 |
|         | equality operator would return.               |                 |
+---------+-----------------------------------------------+-----------------+

Switch Statement
The switch statement is used to perform different actions based on different conditions. Use the switch statement to select one of many code blocks to be executed.
How It Works:-
JavaScript looks at the expression.

It compares the expression with each case (using ===).

If it matches, it runs the code in that case.

break stops it from running more cases.

If no match is found, it runs the default block.

Logical Operators and Booleans:-
Decisions might require more than one comparison, and can be strung together with logical operators to produce a Boolean value.

+--------+---------------------------------------------------------------+------------------------------------------------------+
| Symbol | Description                                                   | Example                                              |
+--------+---------------------------------------------------------------+------------------------------------------------------+
| &&     | Logical AND: Compares two Boolean expressions. Returns true   | (5 > 6) && (5 < 6)                                   |
|        | only if both sides are true.                                  | One side is false, other is true. Returns false      |
+--------+---------------------------------------------------------------+------------------------------------------------------+
| ||     | Logical OR: Compares two Boolean expressions. Returns true    | (5 > 6) || (5 < 6)                                   |
|        | if at least one side is true.                                 | One side is false, other is true. Returns true       |
+--------+---------------------------------------------------------------+------------------------------------------------------+
| !      | Logical NOT: Returns the opposite value of a Boolean          | !(5 > 6)                                             |
|        | expression.                                                   | 5 is not greater than 6, but "!" will return true    |
+--------+---------------------------------------------------------------+------------------------------------------------------+


